npm install babel-core babel-loader@7.1.5 babel-preset-env babel-plugin-transform-runtime -D

babel-core：
abel转译器，提供了babel的转译API，如babel.transform等

babel-loader：
将es6代码transform进行转移

babel-preset-env：
预设的插件机

babel-plugin-transform-runtime:
特定解析一些全局的API如Iterator、Generator、set、Maps、Proxy、Reflect、Symbol、Promise等全局对象。
如果想使用这些全局对象和方法，必须使用babel-polyfill，为当前环境提供一个垫片。

config配置：

var path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  //入口
  entry: {
    //可以有多个入口，也可以只有一个，如果有一个就默认从这个入口开始解析
    "main": "./src/main.js"
  },
  output: {
    path: path.resolve('./dist'),        //相对转绝对生成一个dist文件夹
    filename: './build.js'
  },
  module: {
    loaders: [
      {
        //style-loader 和 css-loader
        //遇到后缀名为css的文件，webpack先用css-loader加载器去解析这个文件
        //最后计算完的css，将会用style-loader生产一个内容为最终解析完的css代码的style标签
        //webpack在打包过程中，遇到后缀为css的文件，就会用style-loader和css-loader去加载这个文件
        test: /\.css$/,
        loader: 'style-loader!css-loader'
      },
      {
        //简易，对于比较小的图片，使用base64编码，可以较少一次图片的网络请求；
        // 那么对于比较大的图片 ，使用base64就不合适了，编码会和html混在一起，一方面可读性差，另一方面加大了html页面内的大小
        // 反而加大了下载页面的大小，得不偿失了呢，因此设置一个合理的limit是非常有必要的
        test: /\.(jpg|png|jpeg|gif|svg)$/,
        loader: 'url-loader?limit=40000'
      },
      {
        test: /\.less$/,
        loader: 'style-loader!css-loader!less-loader'
      },
      {
                //处理es6 7 8
                test: /\.js$/,
                loader: 'babel-loader',
                exclude:/node_modules/,	//排除node_modules的处理
                options: {
                    presets: ['env'],                 //处理关键字
                    plugins: ['transform-runtime']   //处理函数
                }
       }
    ]
  },
  plugins: [
    //插件
    new HtmlWebpackPlugin({
      template: './src/index.html'     //参照物
    })
  ],
  watch: true, //文件监视改动 自动产出build.js
}


