arguments是一个方法的实参的类数组
argumen.length是实参的数量
argumen.callee.length是形参的数量
argumen.callee是当前方法的引用
arguments的第一个用法，是用在函数的实际参数可能是不固定
arguments的第二个用法，是对当前的函数进行回调（可用于匿名函数）

   function max(a,b){
	var max=0;
	for(var i=0;i<arguments.length;i++){
		if(arguments[i]>max){
		max = arguments[i];
		}
	}
	return max;
	console.log(arguments.length);		//结果是3，实参：2，5，6
	console.log(arguments.callee.length);		//结果是2，形参：a,b
   }
   max(2,5,6);					//结果6，返回实参中的最大值

--callee和caller
var n =0;
!function(){					//匿名函数
   n++;
   if(n>5){
      return;
   }
   console.log("hi");
   arguments.callee();
}();						//返回5次hi
	
function a(){
   console.log("I am a");
   console.log(a.caller);
}					
a();					//执行a，a是在全局里被执行，a的caller则为null

function b(){
   console.log("I am b");
   a();
}
b();					//执行b，b中的a此时的caller为b，所以返回的是function b(){}

--call 和 apply：
function c(k,o){
   console.log(k+o);
}
function d(k,o){
   console.log(k-o);
}
c(10,8)			//18
d(10,8)			//2	call的语法：fn.call(obj,a,b)	fn是一个函数，a和b是它的参数，obj是另一个对象，call可以改变对象的this
d.call(c,10,8)		//2	执行的还是d的方法，把this修改为了c的this
d.apply(c,[10,8])		//2	用法和call一样，区别在后面参数需要用数组的方式[10,8]
比如：
var o1 = {
  name : "我是o1",
  show : function(){
   	console.log(this.name);
   } 
}

var o2 = {
   name : "我是o2",
}
o1.show();		//我是o1
01.show.call(02);		//我是o2  ，用的是o1中的show方法this.name，this用的是o2
