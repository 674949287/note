// 输入一个整数N，输出所有和为N的连续正整数序列
// *例如15
// *结果[[1,2,3,4,5],[4,5,6],[7,8]]
// 首先优化算法，最右边不可能超过N/2向上取整，否则肯定相加超过
// 其次利用等差数列求和，计算出第一项和最后一项然后中间循环输出到数组中

// function Fn(N) {
//     let max = Math.ceil(N / 2)
//     let arr = []
//     for (let i = 1; i <= max; i++) {
//         for (let j = 2; j <= max; j++) {
//             if ((i + j) * (j - i + 1) == 2 * N) {
//                 let temp = []
//                 for (let k = i; k <= j; k++) {
//                     temp.push(k)
//                 }
//                 arr.push(temp)
//             }
//         }
//     }
//     return arr
// }