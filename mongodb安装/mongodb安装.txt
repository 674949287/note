安装完成，配置环境变量
在系统变量的	Path新建
C:\Program Files\MongoDB\Server\3.4\bin

通过命令行：mongo，来验证是否配置成功

安装完成后，新建一个存放数据库的文件夹，最好不要装在C盘

新建完通过 mongod --dbpath H:\mongodb 打开一个mongodb的服务端，这个不能关闭

在打开一个新的命令行属于客户端去连接刚才打开的服务端
通过 show dbs 查看数据库内部的数据库	 验证连上数据库

如果需要连接上远程的数据库需要通过 mongo ip地址：27017

数据库创建
use itying

然后在下面的表中插入一条数据即创建完成
db.user.insert({"name":"zhangsan","age":14})	//这样数据库名为itying创建完成，且下表有一张名为user的表里有name:zhangsan，age:14的也创建出来了

查找表
先进入到指定的数据库
use itying	//我要看itying的数据库

然后查找表，通过 show collections
看itying下面的表有多少

查找表中的数据
db.user.find()	//db.表  查找哪张表的数据，限制查找的是user表
db.user.find({"age":14})	//查找user表中age=14的人

age大于14:
db.user.find({"age":{$gt:14}})

age小于14：
db.user.find({"age":{$lt:14}})

age大于等于14:
db.user.find({"age":{$gte:14}})

age小于等于14:
db.user.find({"age":{$lte:14}})

模糊查询：双斜杠包括的内容是模糊匹配的内容	/需要有的文字/
	article表中的数据
	{ "_id" : ObjectId("5e9a7f45d35af5312ca8a17c"), "title" : "1111" }
	{ "_id" : ObjectId("5e9a8446d35af5312ca8a17f"), "title" : "这是一个女装的文章" }
	{ "_id" : ObjectId("5e9a844fd35af5312ca8a180"), "title" : "这是一个男装的文章" }
	{ "_id" : ObjectId("5e9a846cd35af5312ca8a181"), "title" : "这是一个文章" }
通过： db.article.find({"title":/文章/})	//查找title中有文章的数据

查询user表中name中以z开头的数据：
db.user.find({"name":/^z/})

查询指定条件的指定数据 find({查询条件},{显示的内容列})
	user表中的数据
	{ "_id" : ObjectId("5e9a7ea5d35af5312ca8a17a"), "name" : "zhangsan", "age" : 14 }
	{ "_id" : ObjectId("5e9a7f89d35af5312ca8a17d"), "name" : "lisi", "age" : 15 }
	{ "_id" : ObjectId("5e9a7fd2d35af5312ca8a17e"), "name" : "wangwu", "age" : 16 }
通过： db.user.find({},{name:1})	//没有条件，只显示name列

db.user.find({"name":/^z/},{name:1})	//查询name以z开头的，并且只显示name列

db.user.find({"age":{$gte:14}},{name:1,age:1})	//查询年龄大于等于14岁的人的名字和年龄

查询数据排序 sort
db.user.find({}).sort("age":1)	//按照年龄顺序排列从小到大
db.user.find({}).sort("age":-1)	//按照年龄倒序排列从大到小

只查询前2条 limit ――分页的时候可以使用与skip连用
db.user.find()	//查找所有数据
我只想一页显示2条
第一页：db.user.find().skip(0).limit(2)	//一条也不跳过，只拿1，2条， skip跳过数据
第二页：db.user.find().skip(2).limit(2)	//跳过前2条，拿3，4条的数据 
这样就可以实现一个分页的效果

or与查询： 实现我想查询age为14或者为25的人
 db.user.find({$or:[{age:14},{age:25}]})

查询表的第一条数据：
db.user.findOne()	也可以使用	db.user.find().limit(1)

查询数量 count
   查询user表中所有数据的数量
   db.user.find().count()
   查询user表中年龄大于15岁的人的数量
   db.user.find({"age":{$gt:15}}).count()

删除表 drop
db.表名.drop()
当数据库内的表全被删除，或者没表的时候数据库会被默认删除

如果想在有表的情况下，删除数据库，
需要先进入到名为shop的数据库 
use shop 
然后删除数据库
db.dropDatabase()

修改表数据 update({判断条件},{$set:{修改的数据}})
修改user表中wangwu的名字为wangwu666
   db.user.update({"name":"wangwu"},{$set:{"name":"wangwu666"}})
修改user表中名字为wangwu666的人的age为20，sex改为女
   db.user.update({"name":"wangwu666"},{$set:{"age":20,"sex":"女"}})
如果不使用$set,代表后面的内容直接替换前面的内容
   db.user.update({"name":"zhangsan"},{"name":"lisi","age":15})	//zhangsan的一条数据会被lisi，age:15替换

删除表中的数据 remove
删除user表中name为zhangsan的数据
   db.user.remove({"name":"zhangsan"})
如果表中有多条name为zhangsan的数据只想删除一条
   1.通过remove({"name":"zhangsan"},{justOne:true})	//justOne:true
   2.通过增加更具体的条件 remove({"name":"zhangsan","age":15,"sex":"男"})	//精确的匹配到那一条数据删除

索引：是对数据库表中一列或多列的值进行排序的一种结构，可以使查询数据库变得更快

给表快速插入100000条数据：
for(var i=0;i<100000;i++){
db.user.insert({"name":"zhangsan"+i})
}

查询具体的执行时间 explain executionStats
db.user.find({"name":"zhangsan1"}).explain("executionStats")

在未创建索引时,在100000条数据中查询，“executionTimeMillis”：36，需要0.036s
通过 db.user.find({"name":"zhangsan1"}).explain("executionStats")

给user表创建索引：name：1代表顺序，price：-1代表倒叙排列
如果只通过name查询：设置name索引
   db.user.ensureIndex({"name":1})
如果只通过price查询：设置price索引
   db.user.ensureIndex({price:-1})
但有些时候只通过name索引或者price索引，可能存在大量相同的name或者price
为了便于这种查询，可以创建复合索引,这样使用的就使一种组合式的key
   db.user.ensureIndex({"name":1,"price":-1})
通过db.user.find("name":"zhangsan1","price":14)	这样查询起来几乎就是秒查询

获取当前集合的索引：
db.user.getIndexes()	//可以查看到添加的索引name上边多了一条"key":{"name":1}

创建完索引后查询执行事件，“executionTimeMillis”：1，需要0.001s
通过 db.user.find({"name":"zhangsan1"}).explain("executionStats")

删除索引的命令：
   db.user.dropIndex({"user":1})
如果是复合索引通过
   db.user.dropIndex({"name":"zhangsan","price":14})

唯一索引 unique 值只能唯一
给表中的一个属性设置了唯一属性，就不可重复，如果重复会出错
给user表的userid添加唯一索引
db.user.ensureIndex({"userid":1},{"unique":true})
如果一个人的userid：5
再插入一个userid为5的会插入失败
db.user.insert({"userid":5}) //出错




