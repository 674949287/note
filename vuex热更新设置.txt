热更新：修改vuex状态数据，不刷新页面
需要把原本 return的 new Vuex.store({})修改一下，因为每次新建一个store都需要具备热更新的状态

所以用一个const store去接收这个new Vuex.store，在下面定义好热更新，在return这个store

热更新是利用vuex提供的hotUpdate的方法：
 if (module.hot) {
    module.hot.accept([
      './state/state',
      './mutations/mutations',
      './actions/actions',
      './getters/getters'
    ], () => {
      const newState = require('./state/state').default
      const newMutations = require('./mutations/mutations').default
      const newActions = require('./actions/actions').default
      const newGetters = require('./getters/getters').default

      store.hotUpdate({
        state: newState,
        mutations: newMutations,
        actions: newActions,
        getters: newGetters
      })
    })
  }

完整：
export default () => {
  const store = new Vuex.Store({
    strict: isDev, // strict可以限制外部通过this.$store.state.count = 3,这样来修改，使用更规范的commit提交来到mutations修改数据
    state: defaultState,
    mutations,
    getters,
    actions,
    modules: {
      a: {
        namespaced: true,
        state: {
          text: 1
        },
        mutations: {
          updateText (state, text) {
            state.text = text
          }
        },
        getters: {
          textPlus (state, getters, rootState) {
            return state.text + rootState.b.value
          }
        },
        actions: {
          add ({ state, commit, rootState }) { // rootState是拿到全局的
            console.log(rootState)
            commit('updateCount', rootState.count, { root: true })
          }
        }
      },
      b: {
        namespaced: true,
        state: {
          value: 9
        }
      }
    }
  })

  if (module.hot) {
    module.hot.accept([
      './state/state',
      './mutations/mutations',
      './actions/actions',
      './getters/getters'
    ], () => {
      const newState = require('./state/state').default
      const newMutations = require('./mutations/mutations').default
      const newActions = require('./actions/actions').default
      const newGetters = require('./getters/getters').default

      store.hotUpdate({
        state: newState,
        mutations: newMutations,
        actions: newActions,
        getters: newGetters
      })
    })
  }
  return store
}