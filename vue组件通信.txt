Apps ――》 A ――》B
一.props,$emit	解决 父子组件 层数较少的情况
	父组件： 
	   <!-- 组件使用v-bind传值 -->
	    <router :msg="msg"></router>
	子组件:
	   <p>子组件 ----- {{msg}}</p> 
	    props: ["msg"], //props接收

二.$attrs和$listeners	APP往下传递通过v-bind='$attrs'，一层层的传递，通过$attrs[0].msg来调用；从子往APP传通过v-bind='$listeners',通过$emit（自定义事件名，数据）	解决组件嵌套多层关系

三.中央事件总线 创建公共类 $on绑定自定义的事件，$emit触发自定义事件，$on,$emit要绑定同一个实例化对象
1.新建一个EventBus.js：
	import Vue from 'vue'
	const EventBus = new Vue();
	export default EventBus;
2.挂载到main.js：
	//将bus对象挂载到vue原型上，公交车对象
	import EventBus from './EventBus'
	Vue.prototype.$bus = EventBus;	
3.把要传递的数据放到一个data中
      msg:"我是父组件得数据",
 this.$bus.$emit('data',this.msg);
4.从data中接收数据
      this.$bus.$on('data',(m)=>{
        this.m = m;
5.    通过{{m}}来输出传递的值
data(){
    return {
      m:"",
    }
  }

{{m}}

